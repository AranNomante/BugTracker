@model PaginatedList<BugTracker.Models.Bug>

@{
    ViewBag.Title = "Index";
}
<!--Index değişmeyecek-->
<!--DEBUG INFO-->
<!--Parameters: sortOrder, sortColumn, currentFilter, pageNumber, searchString, filter-->
<!--
    sortOrder: ascending or descending,
    sortColumn: column that is referenced for comparison,
    currentFilter: last entered search string,
    pageNumber: current page index (base 1)
    searchString: entered search string,
    filter: search scope; for example, if version is checked from radio buttons filter will be "version" meaning that search scope is changed
    to version
-->
@if (ViewData["order"] == null) { ViewData["order"] = ViewData["order"] = "desc"; }
<!--Display Create for users except admin and assignee types-->
<!--Search Bar-->
<div class="row top-buffer col-md-12">
    <div class="col col-md-12">
        <h3 class="display-4">Bugs Overview</h3>
    </div>
</div>

@using (Html.BeginForm("Index", "Bugs"))
{
    <div class="row top-buffer col-md-12">
        @if (ViewData["filter"] == null) { ViewData["filter"] = "all"; }
        <!--sortOrder acts like a switch; for example, to keep a view in ascending order while changing search strings controller has to receive
        the opposite value of ViewData["order"]-->
        <input type="hidden" name="sortOrder" value="@(ViewData["order"].Equals("asc") ? "desc" : "asc")" />
        <input type="hidden" name="sortColumn" value="@ViewData["sortColumn"]" />
        <div class="col col-md-12">
            <div class="form-inline">
                <div class="form-row">
                    <div class="col">
                        <input type="text" name="searchString" class="form-control" value="@ViewData["CurrentFilter"]" placeholder="Search..." />
                    </div>
                    <div class="col">

                        <input type="submit" value="" id="search" />
                    </div>
                    @if (ViewBag.msg.Equals("user"))
                    {
                        <div class="col">

                            @Html.ActionLink("Create New", "Create", new { prevPage = Request.Url.ToString() }, new { @class = "btn btn-outline-primary" })

                        </div>
                    }
                </div>

            </div>
        </div>
    </div>
    <div class="row col-md-12">


        <div class="col top-buffer col-md-12">
            <div class="form-check form-check-inline">
                <label class="form-check-label" for="r0">All</label>&nbsp;
                <input type="radio" class="form-check-input" name="filter" id="r0" value="all" @(ViewData["filter"].Equals("all") ? "checked" : string.Empty) />
            </div>
            <div class="form-check form-check-inline">
                <label class="form-check-label" for="r1">Title</label>&nbsp;
                <input type="radio" class="form-check-input" name="filter" id="r1" value="title" @(ViewData["filter"].Equals("title") ? "checked" : string.Empty) />
            </div>
            <div class="form-check form-check-inline">
                <label class="form-check-label" for="r2">Severity</label>&nbsp;
                <input type="radio" class="form-check-input" name="filter" id="r2" value="severity" @(ViewData["filter"].Equals("severity") ? "checked" : string.Empty) />
            </div>
            <div class="form-check form-check-inline">
                <label class="form-check-label" for="r3">State</label>&nbsp;
                <input type="radio" class="form-check-input" name="filter" id="r3" value="state" @(ViewData["filter"].Equals("state") ? "checked" : string.Empty) />
            </div>
            <div class="form-check form-check-inline">
                <label class="form-check-label" for="r4">Version</label>&nbsp;
                <input type="radio" class="form-check-input" name="filter" id="r4" value="version" @(ViewData["filter"].Equals("version") ? "checked" : string.Empty) />
            </div>
        </div>
    </div>
}

<div class="row top-buffer col-md-12">
    <div class="col col-md-12">
        <h3 class="text-secondary"><b>Filter: @ViewData["sortColumn"] in @ViewData["order"] order.</b></h3>
    </div>
</div>
<!--Table headers are links for changing sortColumn values-->
<div class="row top-buffer col-md-12">
    <div class="col col-md-12">


        <table class="table table-striped text-center table-bordered">
            <tr>
                <th>
                    @Html.ActionLink("Title", "Index", "Bugs", new { sortOrder = ViewData["order"], sortColumn = "title", currentFilter = ViewData["CurrentFilter"], filter = ViewData["filter"] }, new { @class = "text-primary" })

                </th>
                <th>
                    @Html.ActionLink("Severity", "Index", "Bugs", new { sortOrder = ViewData["order"], sortColumn = "severity", currentFilter = ViewData["CurrentFilter"], filter = ViewData["filter"] }, new { @class = "text-primary" })
                </th>
                <th>
                    @Html.ActionLink("Version", "Index", "Bugs", new { sortOrder = ViewData["order"], sortColumn = "version", currentFilter = ViewData["CurrentFilter"], filter = ViewData["filter"] }, new { @class = "text-primary" })
                </th>
                <th>
                    @Html.ActionLink("State", "Index", "Bugs", new { sortOrder = ViewData["order"], sortColumn = "state", currentFilter = ViewData["CurrentFilter"], filter = ViewData["filter"] }, new { @class = "text-primary" })
                </th>
                <th>
                    @Html.ActionLink("Submit Time", "Index", "Bugs", new { sortOrder = ViewData["order"], sortColumn = "submit", currentFilter = ViewData["CurrentFilter"], filter = ViewData["filter"] }, new { @class = "text-primary" })
                </th>
                <th>
                    @Html.ActionLink("Fix Time", "Index", "Bugs", new { sortOrder = ViewData["order"], sortColumn = "fix", currentFilter = ViewData["CurrentFilter"], filter = ViewData["filter"] }, new { @class = "text-primary" })
                </th>
                @if (ViewBag.msg.Equals("admin"))
                {
                    <th>
                        <p class="text-secondary"> User</p>
                    </th>
                    <th>
                        <p class="text-secondary"> Assignee</p>
                    </th>
                }
                <th>
                    <p class="text-secondary"> Operations</p>
                </th>
            </tr>
            <!--Display the items-->
            @if (Model != null)
            {
                foreach (var item in Model)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.title)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.severity)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.version)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.state)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.submit_time)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.fix_time)
                        </td>
                        @if (ViewBag.msg.Equals("admin"))
                        {
                            <td>
                                @Html.DisplayFor(modelItem => item.submitter)
                            </td>
                            <td>

                                @Html.DisplayFor(modelItem => item.assignee)
                            </td>
                        }
                        <td>
                            <!--Below are the dynamically generated links for each user type-->
                            <div class="btn-group" role="group">
                                @if (!ViewBag.msg.Equals("no") && !ViewBag.msg.Equals("user"))
                                {
                                    if (ViewBag.msg.Equals("admin") || (item.assignee != null && item.assignee.Equals(ViewBag.clrassignee)))
                                    {
                                        @Html.ActionLink("Edit", "Edit", new { id = item.id, prevPage = Request.Url.ToString() }, new { @class = "btn btn-outline-primary" })

                                    }
                                }
                                @Html.ActionLink("Details", "Details", new { id = item.id, prevPage = Request.Url.ToString() }, new { @class = "btn btn-outline-primary" })
                                @if (ViewBag.msg.Equals("admin"))
                                {
                                    @Html.ActionLink("Delete", "Delete", new { id = item.id, prevPage = Request.Url.ToString() }, new { @class = "btn btn-outline-primary" })

                                }
                            </div>

                        </td>
                    </tr>
                }
            }

        </table>
    </div>
</div>
<!--These action links are for switching pages while keeping the previously entered parameter values, to keep sortOrder the same (as explained before); value of ViewData["order"] must be the opposite-->
<div class="row text-center top-buffer col-md-12">
    <div class="col col-md-4">
        @if (Model != null && Model.HasPreviousPage)
        {

            @Html.ActionLink("Previous", "Index", "Bugs", new { sortOrder = (ViewData["order"].Equals("asc") ? "desc" : "asc"), sortColumn = @ViewData["sortColumn"], currentFilter = ViewData["CurrentFilter"], filter = ViewData["filter"], pageNumber = (Model.PageIndex - 1) }, new { @class = "btn btn-outline-primary" }
            )
        }
        else
        {
            <input type="button" value="Previous" class="btn btn-warning" />
        }
    </div>
    <div class="col col-md-4">
        @Html.ActionLink("About", "About", new { prevPage = Request.Url.ToString() }, new { @class = "btn btn-outline-primary" })

    </div>
    <div class="col col-md-4">
        @if (Model != null && Model.HasNextPage)
        {

            @Html.ActionLink("Next", "Index", "Bugs", new { sortOrder = (ViewData["order"].Equals("asc") ? "desc" : "asc"), sortColumn = @ViewData["sortColumn"], currentFilter = ViewData["CurrentFilter"], filter = ViewData["filter"], pageNumber = (Model.PageIndex + 1) }, new { @class = "btn btn-outline-primary" })

        }
        else
        {
            <input type="button" value="Next" class="btn btn-warning" />
        }
    </div>

</div>